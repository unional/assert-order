
import test from 'ava'

import AssertOrder from './index'

import * as utils from './testUtils'

test('all()', t => {
  let a = new AssertOrder()
  t.is(a.all(0, 2), 1)
  t.is(a.next, 0)
  t.is(a.all(0, 2), 2)
  t.is(a.next, 1)
  a.step(1)
  t.is(a.next, 2)

  a = new AssertOrder()
  t.throws(() => a.all(0, 0), "0 is not a valid 'plan' value.")
  t.throws(() => a.all(0, -1), "-1 is not a valid 'plan' value.")

  a = new AssertOrder()
  a.step(0)
  a.some(1)
  t.throws(() => a.all(1, 1), "Expecting 'once(2)', 'step(2)', 'some(1|2)', 'all(2)', 'multiple(2)', but received 'all(1)'")

  a = new AssertOrder()
  a.step(0)
  a.all(1, 2)
  t.throws(() => a.some(1), "Expecting 'all(1)', 'multiple(1)', but received 'some(1)'")

  a = new AssertOrder()
  a.all(0, 2)
  a.all(0, 2)
  t.throws(() => a.all(0, 2), "Expecting 'once(1)', 'step(1)', 'some(1)', 'all(1)', 'multiple(1)', but received 'all(0)'")

  a = new AssertOrder()
  a.all(0, 2)
  t.throws(() => a.all(0, 3), 'The plan count (3) does not match with previous value (2).')

  a = new AssertOrder()
  t.is(a.all(0, 1), 1)
  a.step(1)
  t.is(a.all(2, 2), 1)
  t.is(a.all(2, 2), 2)
  a.step(3)
})


test('on() mix with some()', t => {
  const a = new AssertOrder(2)
  let sequence = '1'
  a.on(0, () => sequence += '2')
  a.on(1, () => sequence += '4')
  a.some(0)
  a.some(0)
  sequence += '3'
  a.once(1)
  t.is(sequence, '1234')
})
